@mixin sprite-icon {
  content: " ";
  display: block;
}

/********************************************
USAGE:
@include sprite-icon;
@include use-sprite(authors-more-arrow-up, true);
position: absolute;
top: 0px;
left: 0px;

********************************************/

/*
* Retina Sprites for Compass
* by:              Andreas Sahle
* forked from:     Retina-Sprites-for-Compass by Gaya Kessler
* @see: https://github.com/Gaya/Retina-Sprites-for-Compass
* last update:     04/13/14
*
* Usage:
* 1. create a folder in your image directory (in this case 'icons').
* 2. create sprite images for pixel ratio 1 screens and put them in the folder.
* 4. create sprite images for pixel ratio 2 screens and put them in the folder,
*    use the same filenames with a '-2x' suffix.
* 5. use the sprite-image in your Sass/Scss using: '@include use-sprite(<sprite-name>, true)'
*/

//first we'll define the folder where the sprites are and their layout
@import "compass/css3";

$icons: sprite-map("icons/*.png", $layout: linear, $spacing: 30px) !default;
$sprite-high-res-suffix: '-2x' !default;

//Sprite mixin, works perfectly with standard defines
@mixin use-sprite($sprite, $sprite-retina: false, $sprite-map: $icons) {
  $sprite-high-res: #{$sprite}#{$sprite-high-res-suffix};
  background-image: sprite-url($sprite-map);
  background-position: sprite-position($sprite-map, $sprite);
  background-repeat: no-repeat;
  overflow: hidden;
  height: image-height(sprite-file($sprite-map, $sprite));
  width: image-width(sprite-file($sprite-map, $sprite));

  @if $sprite-retina {
    @media (-webkit-min-device-pixel-ratio: 2),
    (-o-min-device-pixel-ratio: 3/2),
    (min--moz-device-pixel-ratio: 2),
    (min-device-pixel-ratio: 2), (min-resolution: 144dppx) {

      background-size: (image-width(sprite-path($sprite-map)) / 2) (image-height(sprite-path($sprite-map)) / 2);
      background-position: round(nth(sprite-position($sprite-map, $sprite-high-res), 1) / 2) round(nth(sprite-position($sprite-map, $sprite-high-res), 2) / 2);
      height: image-height(sprite-file($sprite-map, $sprite));
      width: image-width(sprite-file($sprite-map, $sprite));
    }
  }
}
/*************************************************/

/*
  MIXIN TO SET BROWSER ATTRIBUTES FOR ALL BROWSERS
*/

@mixin vendor-prefix($name, $argument) {
  -webkit-#{$name}: #{$argument};
  -ms-#{$name}: #{$argument};
  -moz-#{$name}: #{$argument};
  -o-#{$name}: #{$argument};
  #{$name}: #{$argument};
}

/*************************************************/

/*
  RESPONSIVE MIXIN
*/

$size_w1: 1300px;
$size_pad-wide: 1024px;
$size_pad-portrait: 800px;
$size_phone-wide: 667px;
$size_phone-portrait: 375px;


// Media Querys
@mixin responsive($width) {
  @if $width == tablet-wide {
    @media only screen and (max-width: $size_pad-wide) {
      @content;
    }
  }
  @else if $width == size-1 {
    @media only screen and (max-width: $size_w1) {
      @content;
    }
  }
  @else if $width == tablet-portrait {
    @media only screen and (max-width: $size_pad-portrait) {
      @content;
    }
  }
  @else if $width == phone-wide {
    @media only screen and (max-width: $size_phone-wide) {
      @content;
    }
  }
  @else if $width == phone-portrait {
    @media only screen and (max-width: $size_phone-portrait) {
      @content;
    }
  }
}
/*************************************************/

/*
  MIXIN FOR CSS3 ANIMATIONS


USAGE:

@include keyframes(slide-down) {
  0% { opacity: 1; }
  90% { opacity: 0; }
}

.element {
  width: 100px;
  height: 100px;
  background: black;
  @include animation('slide-down 5s 3');
}
*/


@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }  
  @-ms-keyframes $animation-name {
    @content;
  }
  @-o-keyframes $animation-name {
    @content;
  }  
  @keyframes $animation-name {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}
